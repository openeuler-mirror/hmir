(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[84],{

/***/ "./node_modules/regexpp/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/regexpp/index.mjs ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegExpValidator = exports.RegExpParser = exports.AST = void 0;\nexports.parseRegExpLiteral = parseRegExpLiteral;\nexports.validateRegExpLiteral = validateRegExpLiteral;\nexports.visitRegExpAST = visitRegExpAST;\n\n/*! @author Toru Nagashima <https://github.com/mysticatea> */\nvar ast = /*#__PURE__*/Object.freeze({});\nexports.AST = ast;\nlet largeIdStartRanges = undefined;\nlet largeIdContinueRanges = undefined;\n\nfunction isIdStart(cp) {\n  if (cp < 0x41) return false;\n  if (cp < 0x5b) return true;\n  if (cp < 0x61) return false;\n  if (cp < 0x7b) return true;\n  return isLargeIdStart(cp);\n}\n\nfunction isIdContinue(cp) {\n  if (cp < 0x30) return false;\n  if (cp < 0x3a) return true;\n  if (cp < 0x41) return false;\n  if (cp < 0x5b) return true;\n  if (cp === 0x5f) return true;\n  if (cp < 0x61) return false;\n  if (cp < 0x7b) return true;\n  return isLargeIdStart(cp) || isLargeIdContinue(cp);\n}\n\nfunction isLargeIdStart(cp) {\n  return isInRange(cp, largeIdStartRanges || (largeIdStartRanges = initLargeIdStartRanges()));\n}\n\nfunction isLargeIdContinue(cp) {\n  return isInRange(cp, largeIdContinueRanges || (largeIdContinueRanges = initLargeIdContinueRanges()));\n}\n\nfunction initLargeIdStartRanges() {\n  return restoreRanges(\"4q 0 b 0 5 0 6 m 2 u 2 cp 5 b f 4 8 0 2 0 3m 4 2 1 3 3 2 0 7 0 2 2 2 0 2 j 2 2a 2 3u 9 4l 2 11 3 0 7 14 20 q 5 3 1a 16 10 1 2 2q 2 0 g 1 8 1 b 2 3 0 h 0 2 t u 2g c 0 p w a 1 5 0 6 l 5 0 a 0 4 0 o o 8 a 1i k 2 h 1p 1h 4 0 j 0 8 9 g f 5 7 3 1 3 l 2 6 2 0 4 3 4 0 h 0 e 1 2 2 f 1 b 0 9 5 5 1 3 l 2 6 2 1 2 1 2 1 w 3 2 0 k 2 h 8 2 2 2 l 2 6 2 1 2 4 4 0 j 0 g 1 o 0 c 7 3 1 3 l 2 6 2 1 2 4 4 0 v 1 2 2 g 0 i 0 2 5 4 2 2 3 4 1 2 0 2 1 4 1 4 2 4 b n 0 1h 7 2 2 2 m 2 f 4 0 r 2 6 1 v 0 5 7 2 2 2 m 2 9 2 4 4 0 x 0 2 1 g 1 i 8 2 2 2 14 3 0 h 0 6 2 9 2 p 5 6 h 4 n 2 8 2 0 3 6 1n 1b 2 1 d 6 1n 1 2 0 2 4 2 n 2 0 2 9 2 1 a 0 3 4 2 0 m 3 x 0 1s 7 2 z s 4 38 16 l 0 h 5 5 3 4 0 4 1 8 2 5 c d 0 i 11 2 0 6 0 3 16 2 98 2 3 3 6 2 0 2 3 3 14 2 3 3 w 2 3 3 6 2 0 2 3 3 e 2 1k 2 3 3 1u 12 f h 2d 3 5 4 h7 3 g 2 p 6 22 4 a 8 c 2 3 f h f h f c 2 2 g 1f 10 0 5 0 1w 2g 8 14 2 0 6 1x b u 1e t 3 4 c 17 5 p 1j m a 1g 2b 0 2m 1a i 6 1k t e 1 b 17 r z 16 2 b z 3 8 8 16 3 2 16 3 2 5 2 1 4 0 6 5b 1t 7p 3 5 3 11 3 5 3 7 2 0 2 0 2 0 2 u 3 1g 2 6 2 0 4 2 2 6 4 3 3 5 5 c 6 2 2 6 39 0 e 0 h c 2u 0 5 0 3 9 2 0 3 5 7 0 2 0 2 0 2 f 3 3 6 4 5 0 i 14 22g 1a 2 1a 2 3o 7 3 4 1 d 11 2 0 6 0 3 1j 8 0 h m a 6 2 6 2 6 2 6 2 6 2 6 2 6 2 6 fb 2 q 8 8 4 3 4 5 2d 5 4 2 2h 2 3 6 16 2 2l i v 1d f e9 533 1t g70 4 wc 1w 19 3 7g 4 f b 1 l 1a h u 3 27 14 8 3 2u 3 1g 3 8 17 c 2 2 2 3 2 m u 1f f 1d 1r 5 4 0 2 1 c r b m q s 8 1a t 0 h 4 2 9 b 4 2 14 o 2 2 7 l m 4 0 4 1d 2 0 4 1 3 4 3 0 2 0 p 2 3 a 8 2 d 5 3 5 3 5 a 6 2 6 2 16 2 d 7 36 u 8mb d m 5 1c 6it a5 3 2x 13 6 d 4 6 0 2 9 2 c 2 4 2 0 2 1 2 1 2 2z y a2 j 1r 3 1h 15 b 39 4 2 3q 11 p 7 p c 2g 4 5 3 5 3 5 3 2 10 b 2 p 2 i 2 1 2 e 3 d z 3e 1y 1g 7g s 4 1c 1c v e t 6 11 b t 3 z 5 7 2 4 17 4d j z 5 z 5 13 9 1f 4d 8m a l b 7 49 5 3 0 2 17 2 1 4 0 3 m b m a u 1u i 2 1 b l b p 1z 1j 7 1 1t 0 g 3 2 2 2 s 17 s 4 s 10 7 2 r s 1h b l b i e h 33 20 1k 1e e 1e e z 9p 15 7 1 27 s b 0 9 l 2z k s m d 1g 24 18 x o r z u 0 3 0 9 y 4 0 d 1b f 3 m 0 2 0 10 h 2 o 2d 6 2 0 2 3 2 e 2 9 8 1a 13 7 3 1 3 l 2 6 2 1 2 4 4 0 j 0 d 4 4f 1g j 3 l 2 v 1b l 1 2 0 55 1a 16 3 11 1b l 0 1o 16 e 0 20 q 6e 17 39 1r w 7 3 0 3 7 2 1 2 n g 0 2 0 2n 7 3 12 h 0 2 0 t 0 b 13 8 0 m 0 c 19 k 0 z 1k 7c 8 2 10 i 0 1e t 35 6 2 1 2 11 m 0 q 5 2 1 2 v f 0 94 i 5a 0 28 pl 2v 32 i 5f 24d tq 34i g6 6nu fs 8 u 36 t j 1b h 3 w k 6 i j5 1r 3l 22 6 0 1v c 1t 1 2 0 t 4qf 9 yd 17 8 6wo 7y 1e 2 i 3 9 az 1s5 2y 6 c 4 8 8 9 4mf 2c 2 1y 2 1 3 0 3 1 3 3 2 b 2 0 2 6 2 1s 2 3 3 7 2 6 2 r 2 3 2 4 2 0 4 6 2 9f 3 o 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 7 1th 18 b 6 h 0 aa 17 105 5g 1o 1v 8 0 xh 3 2 q 2 1 2 0 3 0 2 9 2 3 2 0 2 0 7 0 5 0 2 0 2 0 2 2 2 1 2 0 3 0 2 0 2 0 2 0 2 0 2 1 2 0 3 3 2 6 2 3 2 3 2 0 2 9 2 g 6 2 2 4 2 g 3et wyl z 378 c 65 3 4g1 f 5rk 2e8 f1 15v 3t6\");\n}\n\nfunction initLargeIdContinueRanges() {\n  return restoreRanges(\"53 0 g9 33 o 0 70 4 7e 18 2 0 2 1 2 1 2 0 21 a 1d u 7 0 2u 6 3 5 3 1 2 3 3 9 o 0 v q 2k a g 9 y 8 a 0 p 3 2 8 2 2 2 4 18 2 3c e 2 w 1j 2 2 h 2 6 b 1 3 9 i 2 1l 0 2 6 3 1 3 2 a 0 b 1 3 9 f 0 3 2 1l 0 2 4 5 1 3 2 4 0 l b 4 0 c 2 1l 0 2 7 2 2 2 2 l 1 3 9 b 5 2 2 1l 0 2 6 3 1 3 2 8 2 b 1 3 9 j 0 1o 4 4 2 2 3 a 0 f 9 h 4 1m 6 2 2 2 3 8 1 c 1 3 9 i 2 1l 0 2 6 2 2 2 3 8 1 c 1 3 9 h 3 1k 1 2 6 2 2 2 3 a 0 b 1 3 9 i 2 1z 0 5 5 2 0 2 7 7 9 3 1 1q 0 3 6 d 7 2 9 2g 0 3 8 c 5 3 9 1r 1 7 9 c 0 2 0 2 0 5 1 1e j 2 1 6 a 2 z a 0 2t j 2 9 d 3 5 2 2 2 3 6 4 3 e b 2 e jk 2 a 8 pt 2 u 2 u 1 v 1 1t v a 0 3 9 y 2 3 9 40 0 3b b 5 b b 9 3l a 1p 4 1m 9 2 s 3 a 7 9 n d 2 1 1s 4 1c g c 9 i 8 d 2 v c 3 9 19 d 1d j 9 9 7 9 3b 2 2 k 5 0 7 0 3 2 5j 1l 2 4 g0 1 k 0 3g c 5 0 4 b 2db 2 3y 0 2p v ff 5 2y 1 n7q 9 1y 0 5 9 x 1 29 1 7l 0 4 0 5 0 o 4 5 0 2c 1 1f h b 9 7 h e a t 7 q c 19 3 1c d g 9 c 0 b 9 1c d d 0 9 1 3 9 y 2 1f 0 2 2 3 1 6 1 2 0 16 4 6 1 6l 7 2 1 3 9 fmt 0 ki f h f 4 1 p 2 5d 9 12 0 ji 0 6b 0 46 4 86 9 120 2 2 1 6 3 15 2 5 0 4m 1 fy 3 9 9 aa 1 4a a 4w 2 1i e w 9 g 3 1a a 1i 9 7 2 11 d 2 9 6 1 19 0 d 2 1d d 9 3 2 b 2b b 7 0 4h b 6 9 7 3 1k 1 2 6 3 1 3 2 a 0 b 1 3 6 4 4 5d h a 9 5 0 2a j d 9 5y 6 3 8 s 1 2b g g 9 2a c 9 9 2c e 5 9 6r e 4m 9 1z 5 2 1 3 3 2 0 2 1 d 9 3c 6 3 6 4 0 t 9 15 6 2 3 9 0 a a 1b f ba 7 2 7 h 9 1l l 2 d 3f 5 4 0 2 1 2 6 2 0 9 9 1d 4 2 1 2 4 9 9 96 3 ewa 9 3r 4 1o 6 q 9 s6 0 2 1i 8 3 2a 0 c 1 f58 1 43r 4 4 5 9 7 3 6 v 3 45 2 13e 1d e9 1i 5 1d 9 0 f 0 n 4 2 e 11t 6 2 g 3 6 2 1 2 4 7a 6 a 9 bn d 15j 6 32 6 6 9 3o7 9 gvt3 6n\");\n}\n\nfunction isInRange(cp, ranges) {\n  let l = 0,\n      r = ranges.length / 2 | 0,\n      i = 0,\n      min = 0,\n      max = 0;\n\n  while (l < r) {\n    i = (l + r) / 2 | 0;\n    min = ranges[2 * i];\n    max = ranges[2 * i + 1];\n\n    if (cp < min) {\n      r = i;\n    } else if (cp > max) {\n      l = i + 1;\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction restoreRanges(data) {\n  let last = 0;\n  return data.split(\" \").map(s => last += parseInt(s, 36) | 0);\n}\n\nclass DataSet {\n  constructor(raw2018, raw2019, raw2020, raw2021) {\n    this._raw2018 = raw2018;\n    this._raw2019 = raw2019;\n    this._raw2020 = raw2020;\n    this._raw2021 = raw2021;\n  }\n\n  get es2018() {\n    return this._set2018 || (this._set2018 = new Set(this._raw2018.split(\" \")));\n  }\n\n  get es2019() {\n    return this._set2019 || (this._set2019 = new Set(this._raw2019.split(\" \")));\n  }\n\n  get es2020() {\n    return this._set2020 || (this._set2020 = new Set(this._raw2020.split(\" \")));\n  }\n\n  get es2021() {\n    return this._set2021 || (this._set2021 = new Set(this._raw2021.split(\" \")));\n  }\n\n}\n\nconst gcNameSet = new Set([\"General_Category\", \"gc\"]);\nconst scNameSet = new Set([\"Script\", \"Script_Extensions\", \"sc\", \"scx\"]);\nconst gcValueSets = new DataSet(\"C Cased_Letter Cc Cf Close_Punctuation Cn Co Combining_Mark Connector_Punctuation Control Cs Currency_Symbol Dash_Punctuation Decimal_Number Enclosing_Mark Final_Punctuation Format Initial_Punctuation L LC Letter Letter_Number Line_Separator Ll Lm Lo Lowercase_Letter Lt Lu M Mark Math_Symbol Mc Me Mn Modifier_Letter Modifier_Symbol N Nd Nl No Nonspacing_Mark Number Open_Punctuation Other Other_Letter Other_Number Other_Punctuation Other_Symbol P Paragraph_Separator Pc Pd Pe Pf Pi Po Private_Use Ps Punctuation S Sc Separator Sk Sm So Space_Separator Spacing_Mark Surrogate Symbol Titlecase_Letter Unassigned Uppercase_Letter Z Zl Zp Zs cntrl digit punct\", \"\", \"\", \"\");\nconst scValueSets = new DataSet(\"Adlam Adlm Aghb Ahom Anatolian_Hieroglyphs Arab Arabic Armenian Armi Armn Avestan Avst Bali Balinese Bamu Bamum Bass Bassa_Vah Batak Batk Beng Bengali Bhaiksuki Bhks Bopo Bopomofo Brah Brahmi Brai Braille Bugi Buginese Buhd Buhid Cakm Canadian_Aboriginal Cans Cari Carian Caucasian_Albanian Chakma Cham Cher Cherokee Common Copt Coptic Cprt Cuneiform Cypriot Cyrillic Cyrl Deseret Deva Devanagari Dsrt Dupl Duployan Egyp Egyptian_Hieroglyphs Elba Elbasan Ethi Ethiopic Geor Georgian Glag Glagolitic Gonm Goth Gothic Gran Grantha Greek Grek Gujarati Gujr Gurmukhi Guru Han Hang Hangul Hani Hano Hanunoo Hatr Hatran Hebr Hebrew Hira Hiragana Hluw Hmng Hung Imperial_Aramaic Inherited Inscriptional_Pahlavi Inscriptional_Parthian Ital Java Javanese Kaithi Kali Kana Kannada Katakana Kayah_Li Khar Kharoshthi Khmer Khmr Khoj Khojki Khudawadi Knda Kthi Lana Lao Laoo Latin Latn Lepc Lepcha Limb Limbu Lina Linb Linear_A Linear_B Lisu Lyci Lycian Lydi Lydian Mahajani Mahj Malayalam Mand Mandaic Mani Manichaean Marc Marchen Masaram_Gondi Meetei_Mayek Mend Mende_Kikakui Merc Mero Meroitic_Cursive Meroitic_Hieroglyphs Miao Mlym Modi Mong Mongolian Mro Mroo Mtei Mult Multani Myanmar Mymr Nabataean Narb Nbat New_Tai_Lue Newa Nko Nkoo Nshu Nushu Ogam Ogham Ol_Chiki Olck Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_South_Arabian Old_Turkic Oriya Orkh Orya Osage Osge Osma Osmanya Pahawh_Hmong Palm Palmyrene Pau_Cin_Hau Pauc Perm Phag Phags_Pa Phli Phlp Phnx Phoenician Plrd Prti Psalter_Pahlavi Qaac Qaai Rejang Rjng Runic Runr Samaritan Samr Sarb Saur Saurashtra Sgnw Sharada Shavian Shaw Shrd Sidd Siddham SignWriting Sind Sinh Sinhala Sora Sora_Sompeng Soyo Soyombo Sund Sundanese Sylo Syloti_Nagri Syrc Syriac Tagalog Tagb Tagbanwa Tai_Le Tai_Tham Tai_Viet Takr Takri Tale Talu Tamil Taml Tang Tangut Tavt Telu Telugu Tfng Tglg Thaa Thaana Thai Tibetan Tibt Tifinagh Tirh Tirhuta Ugar Ugaritic Vai Vaii Wara Warang_Citi Xpeo Xsux Yi Yiii Zanabazar_Square Zanb Zinh Zyyy\", \"Dogr Dogra Gong Gunjala_Gondi Hanifi_Rohingya Maka Makasar Medefaidrin Medf Old_Sogdian Rohg Sogd Sogdian Sogo\", \"Elym Elymaic Hmnp Nand Nandinagari Nyiakeng_Puachue_Hmong Wancho Wcho\", \"Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\");\nconst binPropertySets = new DataSet(\"AHex ASCII ASCII_Hex_Digit Alpha Alphabetic Any Assigned Bidi_C Bidi_Control Bidi_M Bidi_Mirrored CI CWCF CWCM CWKCF CWL CWT CWU Case_Ignorable Cased Changes_When_Casefolded Changes_When_Casemapped Changes_When_Lowercased Changes_When_NFKC_Casefolded Changes_When_Titlecased Changes_When_Uppercased DI Dash Default_Ignorable_Code_Point Dep Deprecated Dia Diacritic Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Ext Extender Gr_Base Gr_Ext Grapheme_Base Grapheme_Extend Hex Hex_Digit IDC IDS IDSB IDST IDS_Binary_Operator IDS_Trinary_Operator ID_Continue ID_Start Ideo Ideographic Join_C Join_Control LOE Logical_Order_Exception Lower Lowercase Math NChar Noncharacter_Code_Point Pat_Syn Pat_WS Pattern_Syntax Pattern_White_Space QMark Quotation_Mark RI Radical Regional_Indicator SD STerm Sentence_Terminal Soft_Dotted Term Terminal_Punctuation UIdeo Unified_Ideograph Upper Uppercase VS Variation_Selector White_Space XIDC XIDS XID_Continue XID_Start space\", \"Extended_Pictographic\", \"\", \"EBase EComp EMod EPres ExtPict\");\n\nfunction isValidUnicodeProperty(version, name, value) {\n  if (gcNameSet.has(name)) {\n    return version >= 2018 && gcValueSets.es2018.has(value);\n  }\n\n  if (scNameSet.has(name)) {\n    return version >= 2018 && scValueSets.es2018.has(value) || version >= 2019 && scValueSets.es2019.has(value) || version >= 2020 && scValueSets.es2020.has(value) || version >= 2021 && scValueSets.es2021.has(value);\n  }\n\n  return false;\n}\n\nfunction isValidLoneUnicodeProperty(version, value) {\n  return version >= 2018 && binPropertySets.es2018.has(value) || version >= 2019 && binPropertySets.es2019.has(value) || version >= 2021 && binPropertySets.es2021.has(value);\n}\n\nconst Backspace = 0x08;\nconst CharacterTabulation = 0x09;\nconst LineFeed = 0x0a;\nconst LineTabulation = 0x0b;\nconst FormFeed = 0x0c;\nconst CarriageReturn = 0x0d;\nconst ExclamationMark = 0x21;\nconst DollarSign = 0x24;\nconst LeftParenthesis = 0x28;\nconst RightParenthesis = 0x29;\nconst Asterisk = 0x2a;\nconst PlusSign = 0x2b;\nconst Comma = 0x2c;\nconst HyphenMinus = 0x2d;\nconst FullStop = 0x2e;\nconst Solidus = 0x2f;\nconst DigitZero = 0x30;\nconst DigitOne = 0x31;\nconst DigitSeven = 0x37;\nconst DigitNine = 0x39;\nconst Colon = 0x3a;\nconst LessThanSign = 0x3c;\nconst EqualsSign = 0x3d;\nconst GreaterThanSign = 0x3e;\nconst QuestionMark = 0x3f;\nconst LatinCapitalLetterA = 0x41;\nconst LatinCapitalLetterB = 0x42;\nconst LatinCapitalLetterD = 0x44;\nconst LatinCapitalLetterF = 0x46;\nconst LatinCapitalLetterP = 0x50;\nconst LatinCapitalLetterS = 0x53;\nconst LatinCapitalLetterW = 0x57;\nconst LatinCapitalLetterZ = 0x5a;\nconst LowLine = 0x5f;\nconst LatinSmallLetterA = 0x61;\nconst LatinSmallLetterB = 0x62;\nconst LatinSmallLetterC = 0x63;\nconst LatinSmallLetterD = 0x64;\nconst LatinSmallLetterF = 0x66;\nconst LatinSmallLetterG = 0x67;\nconst LatinSmallLetterI = 0x69;\nconst LatinSmallLetterK = 0x6b;\nconst LatinSmallLetterM = 0x6d;\nconst LatinSmallLetterN = 0x6e;\nconst LatinSmallLetterP = 0x70;\nconst LatinSmallLetterR = 0x72;\nconst LatinSmallLetterS = 0x73;\nconst LatinSmallLetterT = 0x74;\nconst LatinSmallLetterU = 0x75;\nconst LatinSmallLetterV = 0x76;\nconst LatinSmallLetterW = 0x77;\nconst LatinSmallLetterX = 0x78;\nconst LatinSmallLetterY = 0x79;\nconst LatinSmallLetterZ = 0x7a;\nconst LeftSquareBracket = 0x5b;\nconst ReverseSolidus = 0x5c;\nconst RightSquareBracket = 0x5d;\nconst CircumflexAccent = 0x5e;\nconst LeftCurlyBracket = 0x7b;\nconst VerticalLine = 0x7c;\nconst RightCurlyBracket = 0x7d;\nconst ZeroWidthNonJoiner = 0x200c;\nconst ZeroWidthJoiner = 0x200d;\nconst LineSeparator = 0x2028;\nconst ParagraphSeparator = 0x2029;\nconst MinCodePoint = 0x00;\nconst MaxCodePoint = 0x10ffff;\n\nfunction isLatinLetter(code) {\n  return code >= LatinCapitalLetterA && code <= LatinCapitalLetterZ || code >= LatinSmallLetterA && code <= LatinSmallLetterZ;\n}\n\nfunction isDecimalDigit(code) {\n  return code >= DigitZero && code <= DigitNine;\n}\n\nfunction isOctalDigit(code) {\n  return code >= DigitZero && code <= DigitSeven;\n}\n\nfunction isHexDigit(code) {\n  return code >= DigitZero && code <= DigitNine || code >= LatinCapitalLetterA && code <= LatinCapitalLetterF || code >= LatinSmallLetterA && code <= LatinSmallLetterF;\n}\n\nfunction isLineTerminator(code) {\n  return code === LineFeed || code === CarriageReturn || code === LineSeparator || code === ParagraphSeparator;\n}\n\nfunction isValidUnicode(code) {\n  return code >= MinCodePoint && code <= MaxCodePoint;\n}\n\nfunction digitToInt(code) {\n  if (code >= LatinSmallLetterA && code <= LatinSmallLetterF) {\n    return code - LatinSmallLetterA + 10;\n  }\n\n  if (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) {\n    return code - LatinCapitalLetterA + 10;\n  }\n\n  return code - DigitZero;\n}\n\nfunction isLeadSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction combineSurrogatePair(lead, trail) {\n  return (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;\n}\n\nconst legacyImpl = {\n  at(s, end, i) {\n    return i < end ? s.charCodeAt(i) : -1;\n  },\n\n  width(c) {\n    return 1;\n  }\n\n};\nconst unicodeImpl = {\n  at(s, end, i) {\n    return i < end ? s.codePointAt(i) : -1;\n  },\n\n  width(c) {\n    return c > 0xffff ? 2 : 1;\n  }\n\n};\n\nclass Reader {\n  constructor() {\n    this._impl = legacyImpl;\n    this._s = \"\";\n    this._i = 0;\n    this._end = 0;\n    this._cp1 = -1;\n    this._w1 = 1;\n    this._cp2 = -1;\n    this._w2 = 1;\n    this._cp3 = -1;\n    this._w3 = 1;\n    this._cp4 = -1;\n  }\n\n  get source() {\n    return this._s;\n  }\n\n  get index() {\n    return this._i;\n  }\n\n  get currentCodePoint() {\n    return this._cp1;\n  }\n\n  get nextCodePoint() {\n    return this._cp2;\n  }\n\n  get nextCodePoint2() {\n    return this._cp3;\n  }\n\n  get nextCodePoint3() {\n    return this._cp4;\n  }\n\n  reset(source, start, end, uFlag) {\n    this._impl = uFlag ? unicodeImpl : legacyImpl;\n    this._s = source;\n    this._end = end;\n    this.rewind(start);\n  }\n\n  rewind(index) {\n    const impl = this._impl;\n    this._i = index;\n    this._cp1 = impl.at(this._s, this._end, index);\n    this._w1 = impl.width(this._cp1);\n    this._cp2 = impl.at(this._s, this._end, index + this._w1);\n    this._w2 = impl.width(this._cp2);\n    this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2);\n    this._w3 = impl.width(this._cp3);\n    this._cp4 = impl.at(this._s, this._end, index + this._w1 + this._w2 + this._w3);\n  }\n\n  advance() {\n    if (this._cp1 !== -1) {\n      const impl = this._impl;\n      this._i += this._w1;\n      this._cp1 = this._cp2;\n      this._w1 = this._w2;\n      this._cp2 = this._cp3;\n      this._w2 = impl.width(this._cp2);\n      this._cp3 = this._cp4;\n      this._w3 = impl.width(this._cp3);\n      this._cp4 = impl.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);\n    }\n  }\n\n  eat(cp) {\n    if (this._cp1 === cp) {\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eat2(cp1, cp2) {\n    if (this._cp1 === cp1 && this._cp2 === cp2) {\n      this.advance();\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eat3(cp1, cp2, cp3) {\n    if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {\n      this.advance();\n      this.advance();\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass RegExpSyntaxError extends SyntaxError {\n  constructor(source, uFlag, index, message) {\n    if (source) {\n      if (!source.startsWith(\"/\")) {\n        source = `/${source}/${uFlag ? \"u\" : \"\"}`;\n      }\n\n      source = `: ${source}`;\n    }\n\n    super(`Invalid regular expression${source}: ${message}`);\n    this.index = index;\n  }\n\n}\n\nfunction isSyntaxCharacter(cp) {\n  return cp === CircumflexAccent || cp === DollarSign || cp === ReverseSolidus || cp === FullStop || cp === Asterisk || cp === PlusSign || cp === QuestionMark || cp === LeftParenthesis || cp === RightParenthesis || cp === LeftSquareBracket || cp === RightSquareBracket || cp === LeftCurlyBracket || cp === RightCurlyBracket || cp === VerticalLine;\n}\n\nfunction isRegExpIdentifierStart(cp) {\n  return isIdStart(cp) || cp === DollarSign || cp === LowLine;\n}\n\nfunction isRegExpIdentifierPart(cp) {\n  return isIdContinue(cp) || cp === DollarSign || cp === LowLine || cp === ZeroWidthNonJoiner || cp === ZeroWidthJoiner;\n}\n\nfunction isUnicodePropertyNameCharacter(cp) {\n  return isLatinLetter(cp) || cp === LowLine;\n}\n\nfunction isUnicodePropertyValueCharacter(cp) {\n  return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp);\n}\n\nclass RegExpValidator {\n  constructor(options) {\n    this._reader = new Reader();\n    this._uFlag = false;\n    this._nFlag = false;\n    this._lastIntValue = 0;\n    this._lastMinValue = 0;\n    this._lastMaxValue = 0;\n    this._lastStrValue = \"\";\n    this._lastKeyValue = \"\";\n    this._lastValValue = \"\";\n    this._lastAssertionIsQuantifiable = false;\n    this._numCapturingParens = 0;\n    this._groupNames = new Set();\n    this._backreferenceNames = new Set();\n    this._options = options || {};\n  }\n\n  validateLiteral(source) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n    this._uFlag = this._nFlag = false;\n    this.reset(source, start, end);\n    this.onLiteralEnter(start);\n\n    if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {\n      const flagStart = this.index;\n      const uFlag = source.includes(\"u\", flagStart);\n      this.validateFlags(source, flagStart, end);\n      this.validatePattern(source, start + 1, flagStart - 1, uFlag);\n    } else if (start >= end) {\n      this.raise(\"Empty\");\n    } else {\n      const c = String.fromCodePoint(this.currentCodePoint);\n      this.raise(`Unexpected character '${c}'`);\n    }\n\n    this.onLiteralLeave(start, end);\n  }\n\n  validateFlags(source) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n    const existingFlags = new Set();\n    let global = false;\n    let ignoreCase = false;\n    let multiline = false;\n    let sticky = false;\n    let unicode = false;\n    let dotAll = false;\n    let hasIndices = false;\n\n    for (let i = start; i < end; ++i) {\n      const flag = source.charCodeAt(i);\n\n      if (existingFlags.has(flag)) {\n        this.raise(`Duplicated flag '${source[i]}'`);\n      }\n\n      existingFlags.add(flag);\n\n      if (flag === LatinSmallLetterG) {\n        global = true;\n      } else if (flag === LatinSmallLetterI) {\n        ignoreCase = true;\n      } else if (flag === LatinSmallLetterM) {\n        multiline = true;\n      } else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {\n        unicode = true;\n      } else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {\n        sticky = true;\n      } else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {\n        dotAll = true;\n      } else if (flag === LatinSmallLetterD && this.ecmaVersion >= 2022) {\n        hasIndices = true;\n      } else {\n        this.raise(`Invalid flag '${source[i]}'`);\n      }\n    }\n\n    this.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices);\n  }\n\n  validatePattern(source) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n    let uFlag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this._uFlag = uFlag && this.ecmaVersion >= 2015;\n    this._nFlag = uFlag && this.ecmaVersion >= 2018;\n    this.reset(source, start, end);\n    this.consumePattern();\n\n    if (!this._nFlag && this.ecmaVersion >= 2018 && this._groupNames.size > 0) {\n      this._nFlag = true;\n      this.rewind(start);\n      this.consumePattern();\n    }\n  }\n\n  get strict() {\n    return Boolean(this._options.strict || this._uFlag);\n  }\n\n  get ecmaVersion() {\n    return this._options.ecmaVersion || 2022;\n  }\n\n  onLiteralEnter(start) {\n    if (this._options.onLiteralEnter) {\n      this._options.onLiteralEnter(start);\n    }\n  }\n\n  onLiteralLeave(start, end) {\n    if (this._options.onLiteralLeave) {\n      this._options.onLiteralLeave(start, end);\n    }\n  }\n\n  onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices) {\n    if (this._options.onFlags) {\n      this._options.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices);\n    }\n  }\n\n  onPatternEnter(start) {\n    if (this._options.onPatternEnter) {\n      this._options.onPatternEnter(start);\n    }\n  }\n\n  onPatternLeave(start, end) {\n    if (this._options.onPatternLeave) {\n      this._options.onPatternLeave(start, end);\n    }\n  }\n\n  onDisjunctionEnter(start) {\n    if (this._options.onDisjunctionEnter) {\n      this._options.onDisjunctionEnter(start);\n    }\n  }\n\n  onDisjunctionLeave(start, end) {\n    if (this._options.onDisjunctionLeave) {\n      this._options.onDisjunctionLeave(start, end);\n    }\n  }\n\n  onAlternativeEnter(start, index) {\n    if (this._options.onAlternativeEnter) {\n      this._options.onAlternativeEnter(start, index);\n    }\n  }\n\n  onAlternativeLeave(start, end, index) {\n    if (this._options.onAlternativeLeave) {\n      this._options.onAlternativeLeave(start, end, index);\n    }\n  }\n\n  onGroupEnter(start) {\n    if (this._options.onGroupEnter) {\n      this._options.onGroupEnter(start);\n    }\n  }\n\n  onGroupLeave(start, end) {\n    if (this._options.onGroupLeave) {\n      this._options.onGroupLeave(start, end);\n    }\n  }\n\n  onCapturingGroupEnter(start, name) {\n    if (this._options.onCapturingGroupEnter) {\n      this._options.onCapturingGroupEnter(start, name);\n    }\n  }\n\n  onCapturingGroupLeave(start, end, name) {\n    if (this._options.onCapturingGroupLeave) {\n      this._options.onCapturingGroupLeave(start, end, name);\n    }\n  }\n\n  onQuantifier(start, end, min, max, greedy) {\n    if (this._options.onQuantifier) {\n      this._options.onQuantifier(start, end, min, max, greedy);\n    }\n  }\n\n  onLookaroundAssertionEnter(start, kind, negate) {\n    if (this._options.onLookaroundAssertionEnter) {\n      this._options.onLookaroundAssertionEnter(start, kind, negate);\n    }\n  }\n\n  onLookaroundAssertionLeave(start, end, kind, negate) {\n    if (this._options.onLookaroundAssertionLeave) {\n      this._options.onLookaroundAssertionLeave(start, end, kind, negate);\n    }\n  }\n\n  onEdgeAssertion(start, end, kind) {\n    if (this._options.onEdgeAssertion) {\n      this._options.onEdgeAssertion(start, end, kind);\n    }\n  }\n\n  onWordBoundaryAssertion(start, end, kind, negate) {\n    if (this._options.onWordBoundaryAssertion) {\n      this._options.onWordBoundaryAssertion(start, end, kind, negate);\n    }\n  }\n\n  onAnyCharacterSet(start, end, kind) {\n    if (this._options.onAnyCharacterSet) {\n      this._options.onAnyCharacterSet(start, end, kind);\n    }\n  }\n\n  onEscapeCharacterSet(start, end, kind, negate) {\n    if (this._options.onEscapeCharacterSet) {\n      this._options.onEscapeCharacterSet(start, end, kind, negate);\n    }\n  }\n\n  onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n    if (this._options.onUnicodePropertyCharacterSet) {\n      this._options.onUnicodePropertyCharacterSet(start, end, kind, key, value, negate);\n    }\n  }\n\n  onCharacter(start, end, value) {\n    if (this._options.onCharacter) {\n      this._options.onCharacter(start, end, value);\n    }\n  }\n\n  onBackreference(start, end, ref) {\n    if (this._options.onBackreference) {\n      this._options.onBackreference(start, end, ref);\n    }\n  }\n\n  onCharacterClassEnter(start, negate) {\n    if (this._options.onCharacterClassEnter) {\n      this._options.onCharacterClassEnter(start, negate);\n    }\n  }\n\n  onCharacterClassLeave(start, end, negate) {\n    if (this._options.onCharacterClassLeave) {\n      this._options.onCharacterClassLeave(start, end, negate);\n    }\n  }\n\n  onCharacterClassRange(start, end, min, max) {\n    if (this._options.onCharacterClassRange) {\n      this._options.onCharacterClassRange(start, end, min, max);\n    }\n  }\n\n  get source() {\n    return this._reader.source;\n  }\n\n  get index() {\n    return this._reader.index;\n  }\n\n  get currentCodePoint() {\n    return this._reader.currentCodePoint;\n  }\n\n  get nextCodePoint() {\n    return this._reader.nextCodePoint;\n  }\n\n  get nextCodePoint2() {\n    return this._reader.nextCodePoint2;\n  }\n\n  get nextCodePoint3() {\n    return this._reader.nextCodePoint3;\n  }\n\n  reset(source, start, end) {\n    this._reader.reset(source, start, end, this._uFlag);\n  }\n\n  rewind(index) {\n    this._reader.rewind(index);\n  }\n\n  advance() {\n    this._reader.advance();\n  }\n\n  eat(cp) {\n    return this._reader.eat(cp);\n  }\n\n  eat2(cp1, cp2) {\n    return this._reader.eat2(cp1, cp2);\n  }\n\n  eat3(cp1, cp2, cp3) {\n    return this._reader.eat3(cp1, cp2, cp3);\n  }\n\n  raise(message) {\n    throw new RegExpSyntaxError(this.source, this._uFlag, this.index, message);\n  }\n\n  eatRegExpBody() {\n    const start = this.index;\n    let inClass = false;\n    let escaped = false;\n\n    for (;;) {\n      const cp = this.currentCodePoint;\n\n      if (cp === -1 || isLineTerminator(cp)) {\n        const kind = inClass ? \"character class\" : \"regular expression\";\n        this.raise(`Unterminated ${kind}`);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else if (cp === ReverseSolidus) {\n        escaped = true;\n      } else if (cp === LeftSquareBracket) {\n        inClass = true;\n      } else if (cp === RightSquareBracket) {\n        inClass = false;\n      } else if (cp === Solidus && !inClass || cp === Asterisk && this.index === start) {\n        break;\n      }\n\n      this.advance();\n    }\n\n    return this.index !== start;\n  }\n\n  consumePattern() {\n    const start = this.index;\n    this._numCapturingParens = this.countCapturingParens();\n\n    this._groupNames.clear();\n\n    this._backreferenceNames.clear();\n\n    this.onPatternEnter(start);\n    this.consumeDisjunction();\n    const cp = this.currentCodePoint;\n\n    if (this.currentCodePoint !== -1) {\n      if (cp === RightParenthesis) {\n        this.raise(\"Unmatched ')'\");\n      }\n\n      if (cp === ReverseSolidus) {\n        this.raise(\"\\\\ at end of pattern\");\n      }\n\n      if (cp === RightSquareBracket || cp === RightCurlyBracket) {\n        this.raise(\"Lone quantifier brackets\");\n      }\n\n      const c = String.fromCodePoint(cp);\n      this.raise(`Unexpected character '${c}'`);\n    }\n\n    for (const name of this._backreferenceNames) {\n      if (!this._groupNames.has(name)) {\n        this.raise(\"Invalid named capture referenced\");\n      }\n    }\n\n    this.onPatternLeave(start, this.index);\n  }\n\n  countCapturingParens() {\n    const start = this.index;\n    let inClass = false;\n    let escaped = false;\n    let count = 0;\n    let cp = 0;\n\n    while ((cp = this.currentCodePoint) !== -1) {\n      if (escaped) {\n        escaped = false;\n      } else if (cp === ReverseSolidus) {\n        escaped = true;\n      } else if (cp === LeftSquareBracket) {\n        inClass = true;\n      } else if (cp === RightSquareBracket) {\n        inClass = false;\n      } else if (cp === LeftParenthesis && !inClass && (this.nextCodePoint !== QuestionMark || this.nextCodePoint2 === LessThanSign && this.nextCodePoint3 !== EqualsSign && this.nextCodePoint3 !== ExclamationMark)) {\n        count += 1;\n      }\n\n      this.advance();\n    }\n\n    this.rewind(start);\n    return count;\n  }\n\n  consumeDisjunction() {\n    const start = this.index;\n    let i = 0;\n    this.onDisjunctionEnter(start);\n\n    do {\n      this.consumeAlternative(i++);\n    } while (this.eat(VerticalLine));\n\n    if (this.consumeQuantifier(true)) {\n      this.raise(\"Nothing to repeat\");\n    }\n\n    if (this.eat(LeftCurlyBracket)) {\n      this.raise(\"Lone quantifier brackets\");\n    }\n\n    this.onDisjunctionLeave(start, this.index);\n  }\n\n  consumeAlternative(i) {\n    const start = this.index;\n    this.onAlternativeEnter(start, i);\n\n    while (this.currentCodePoint !== -1 && this.consumeTerm()) {}\n\n    this.onAlternativeLeave(start, this.index, i);\n  }\n\n  consumeTerm() {\n    if (this._uFlag || this.strict) {\n      return this.consumeAssertion() || this.consumeAtom() && this.consumeOptionalQuantifier();\n    }\n\n    return this.consumeAssertion() && (!this._lastAssertionIsQuantifiable || this.consumeOptionalQuantifier()) || this.consumeExtendedAtom() && this.consumeOptionalQuantifier();\n  }\n\n  consumeOptionalQuantifier() {\n    this.consumeQuantifier();\n    return true;\n  }\n\n  consumeAssertion() {\n    const start = this.index;\n    this._lastAssertionIsQuantifiable = false;\n\n    if (this.eat(CircumflexAccent)) {\n      this.onEdgeAssertion(start, this.index, \"start\");\n      return true;\n    }\n\n    if (this.eat(DollarSign)) {\n      this.onEdgeAssertion(start, this.index, \"end\");\n      return true;\n    }\n\n    if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {\n      this.onWordBoundaryAssertion(start, this.index, \"word\", true);\n      return true;\n    }\n\n    if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {\n      this.onWordBoundaryAssertion(start, this.index, \"word\", false);\n      return true;\n    }\n\n    if (this.eat2(LeftParenthesis, QuestionMark)) {\n      const lookbehind = this.ecmaVersion >= 2018 && this.eat(LessThanSign);\n      let negate = false;\n\n      if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {\n        const kind = lookbehind ? \"lookbehind\" : \"lookahead\";\n        this.onLookaroundAssertionEnter(start, kind, negate);\n        this.consumeDisjunction();\n\n        if (!this.eat(RightParenthesis)) {\n          this.raise(\"Unterminated group\");\n        }\n\n        this._lastAssertionIsQuantifiable = !lookbehind && !this.strict;\n        this.onLookaroundAssertionLeave(start, this.index, kind, negate);\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  consumeQuantifier() {\n    let noConsume = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const start = this.index;\n    let min = 0;\n    let max = 0;\n    let greedy = false;\n\n    if (this.eat(Asterisk)) {\n      min = 0;\n      max = Number.POSITIVE_INFINITY;\n    } else if (this.eat(PlusSign)) {\n      min = 1;\n      max = Number.POSITIVE_INFINITY;\n    } else if (this.eat(QuestionMark)) {\n      min = 0;\n      max = 1;\n    } else if (this.eatBracedQuantifier(noConsume)) {\n      min = this._lastMinValue;\n      max = this._lastMaxValue;\n    } else {\n      return false;\n    }\n\n    greedy = !this.eat(QuestionMark);\n\n    if (!noConsume) {\n      this.onQuantifier(start, this.index, min, max, greedy);\n    }\n\n    return true;\n  }\n\n  eatBracedQuantifier(noError) {\n    const start = this.index;\n\n    if (this.eat(LeftCurlyBracket)) {\n      this._lastMinValue = 0;\n      this._lastMaxValue = Number.POSITIVE_INFINITY;\n\n      if (this.eatDecimalDigits()) {\n        this._lastMinValue = this._lastMaxValue = this._lastIntValue;\n\n        if (this.eat(Comma)) {\n          this._lastMaxValue = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY;\n        }\n\n        if (this.eat(RightCurlyBracket)) {\n          if (!noError && this._lastMaxValue < this._lastMinValue) {\n            this.raise(\"numbers out of order in {} quantifier\");\n          }\n\n          return true;\n        }\n      }\n\n      if (!noError && (this._uFlag || this.strict)) {\n        this.raise(\"Incomplete quantifier\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  consumeAtom() {\n    return this.consumePatternCharacter() || this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup();\n  }\n\n  consumeDot() {\n    if (this.eat(FullStop)) {\n      this.onAnyCharacterSet(this.index - 1, this.index, \"any\");\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeReverseSolidusAtomEscape() {\n    const start = this.index;\n\n    if (this.eat(ReverseSolidus)) {\n      if (this.consumeAtomEscape()) {\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  consumeUncapturingGroup() {\n    const start = this.index;\n\n    if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {\n      this.onGroupEnter(start);\n      this.consumeDisjunction();\n\n      if (!this.eat(RightParenthesis)) {\n        this.raise(\"Unterminated group\");\n      }\n\n      this.onGroupLeave(start, this.index);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeCapturingGroup() {\n    const start = this.index;\n\n    if (this.eat(LeftParenthesis)) {\n      let name = null;\n\n      if (this.ecmaVersion >= 2018) {\n        if (this.consumeGroupSpecifier()) {\n          name = this._lastStrValue;\n        }\n      } else if (this.currentCodePoint === QuestionMark) {\n        this.raise(\"Invalid group\");\n      }\n\n      this.onCapturingGroupEnter(start, name);\n      this.consumeDisjunction();\n\n      if (!this.eat(RightParenthesis)) {\n        this.raise(\"Unterminated group\");\n      }\n\n      this.onCapturingGroupLeave(start, this.index, name);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeExtendedAtom() {\n    return this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeReverseSolidusFollowedByC() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup() || this.consumeInvalidBracedQuantifier() || this.consumeExtendedPatternCharacter();\n  }\n\n  consumeReverseSolidusFollowedByC() {\n    const start = this.index;\n\n    if (this.currentCodePoint === ReverseSolidus && this.nextCodePoint === LatinSmallLetterC) {\n      this._lastIntValue = this.currentCodePoint;\n      this.advance();\n      this.onCharacter(start, this.index, ReverseSolidus);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeInvalidBracedQuantifier() {\n    if (this.eatBracedQuantifier(true)) {\n      this.raise(\"Nothing to repeat\");\n    }\n\n    return false;\n  }\n\n  consumePatternCharacter() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n\n    if (cp !== -1 && !isSyntaxCharacter(cp)) {\n      this.advance();\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeExtendedPatternCharacter() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n\n    if (cp !== -1 && cp !== CircumflexAccent && cp !== DollarSign && cp !== ReverseSolidus && cp !== FullStop && cp !== Asterisk && cp !== PlusSign && cp !== QuestionMark && cp !== LeftParenthesis && cp !== RightParenthesis && cp !== LeftSquareBracket && cp !== VerticalLine) {\n      this.advance();\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeGroupSpecifier() {\n    if (this.eat(QuestionMark)) {\n      if (this.eatGroupName()) {\n        if (!this._groupNames.has(this._lastStrValue)) {\n          this._groupNames.add(this._lastStrValue);\n\n          return true;\n        }\n\n        this.raise(\"Duplicate capture group name\");\n      }\n\n      this.raise(\"Invalid group\");\n    }\n\n    return false;\n  }\n\n  consumeAtomEscape() {\n    if (this.consumeBackreference() || this.consumeCharacterClassEscape() || this.consumeCharacterEscape() || this._nFlag && this.consumeKGroupName()) {\n      return true;\n    }\n\n    if (this.strict || this._uFlag) {\n      this.raise(\"Invalid escape\");\n    }\n\n    return false;\n  }\n\n  consumeBackreference() {\n    const start = this.index;\n\n    if (this.eatDecimalEscape()) {\n      const n = this._lastIntValue;\n\n      if (n <= this._numCapturingParens) {\n        this.onBackreference(start - 1, this.index, n);\n        return true;\n      }\n\n      if (this.strict || this._uFlag) {\n        this.raise(\"Invalid escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  consumeCharacterClassEscape() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterD)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"digit\", false);\n      return true;\n    }\n\n    if (this.eat(LatinCapitalLetterD)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"digit\", true);\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterS)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"space\", false);\n      return true;\n    }\n\n    if (this.eat(LatinCapitalLetterS)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"space\", true);\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterW)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"word\", false);\n      return true;\n    }\n\n    if (this.eat(LatinCapitalLetterW)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"word\", true);\n      return true;\n    }\n\n    let negate = false;\n\n    if (this._uFlag && this.ecmaVersion >= 2018 && (this.eat(LatinSmallLetterP) || (negate = this.eat(LatinCapitalLetterP)))) {\n      this._lastIntValue = -1;\n\n      if (this.eat(LeftCurlyBracket) && this.eatUnicodePropertyValueExpression() && this.eat(RightCurlyBracket)) {\n        this.onUnicodePropertyCharacterSet(start - 1, this.index, \"property\", this._lastKeyValue, this._lastValValue || null, negate);\n        return true;\n      }\n\n      this.raise(\"Invalid property name\");\n    }\n\n    return false;\n  }\n\n  consumeCharacterEscape() {\n    const start = this.index;\n\n    if (this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && !this._uFlag && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape()) {\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeKGroupName() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterK)) {\n      if (this.eatGroupName()) {\n        const groupName = this._lastStrValue;\n\n        this._backreferenceNames.add(groupName);\n\n        this.onBackreference(start - 1, this.index, groupName);\n        return true;\n      }\n\n      this.raise(\"Invalid named reference\");\n    }\n\n    return false;\n  }\n\n  consumeCharacterClass() {\n    const start = this.index;\n\n    if (this.eat(LeftSquareBracket)) {\n      const negate = this.eat(CircumflexAccent);\n      this.onCharacterClassEnter(start, negate);\n      this.consumeClassRanges();\n\n      if (!this.eat(RightSquareBracket)) {\n        this.raise(\"Unterminated character class\");\n      }\n\n      this.onCharacterClassLeave(start, this.index, negate);\n      return true;\n    }\n\n    return false;\n  }\n\n  consumeClassRanges() {\n    const strict = this.strict || this._uFlag;\n\n    for (;;) {\n      const rangeStart = this.index;\n\n      if (!this.consumeClassAtom()) {\n        break;\n      }\n\n      const min = this._lastIntValue;\n\n      if (!this.eat(HyphenMinus)) {\n        continue;\n      }\n\n      this.onCharacter(this.index - 1, this.index, HyphenMinus);\n\n      if (!this.consumeClassAtom()) {\n        break;\n      }\n\n      const max = this._lastIntValue;\n\n      if (min === -1 || max === -1) {\n        if (strict) {\n          this.raise(\"Invalid character class\");\n        }\n\n        continue;\n      }\n\n      if (min > max) {\n        this.raise(\"Range out of order in character class\");\n      }\n\n      this.onCharacterClassRange(rangeStart, this.index, min, max);\n    }\n  }\n\n  consumeClassAtom() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n\n    if (cp !== -1 && cp !== ReverseSolidus && cp !== RightSquareBracket) {\n      this.advance();\n      this._lastIntValue = cp;\n      this.onCharacter(start, this.index, this._lastIntValue);\n      return true;\n    }\n\n    if (this.eat(ReverseSolidus)) {\n      if (this.consumeClassEscape()) {\n        return true;\n      }\n\n      if (!this.strict && this.currentCodePoint === LatinSmallLetterC) {\n        this._lastIntValue = ReverseSolidus;\n        this.onCharacter(start, this.index, this._lastIntValue);\n        return true;\n      }\n\n      if (this.strict || this._uFlag) {\n        this.raise(\"Invalid escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  consumeClassEscape() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterB)) {\n      this._lastIntValue = Backspace;\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n\n    if (this._uFlag && this.eat(HyphenMinus)) {\n      this._lastIntValue = HyphenMinus;\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n\n    let cp = 0;\n\n    if (!this.strict && !this._uFlag && this.currentCodePoint === LatinSmallLetterC && (isDecimalDigit(cp = this.nextCodePoint) || cp === LowLine)) {\n      this.advance();\n      this.advance();\n      this._lastIntValue = cp % 0x20;\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n\n    return this.consumeCharacterClassEscape() || this.consumeCharacterEscape();\n  }\n\n  eatGroupName() {\n    if (this.eat(LessThanSign)) {\n      if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {\n        return true;\n      }\n\n      this.raise(\"Invalid capture group name\");\n    }\n\n    return false;\n  }\n\n  eatRegExpIdentifierName() {\n    if (this.eatRegExpIdentifierStart()) {\n      this._lastStrValue = String.fromCodePoint(this._lastIntValue);\n\n      while (this.eatRegExpIdentifierPart()) {\n        this._lastStrValue += String.fromCodePoint(this._lastIntValue);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  eatRegExpIdentifierStart() {\n    const start = this.index;\n    const forceUFlag = !this._uFlag && this.ecmaVersion >= 2020;\n    let cp = this.currentCodePoint;\n    this.advance();\n\n    if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {\n      cp = this._lastIntValue;\n    } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {\n      cp = combineSurrogatePair(cp, this.currentCodePoint);\n      this.advance();\n    }\n\n    if (isRegExpIdentifierStart(cp)) {\n      this._lastIntValue = cp;\n      return true;\n    }\n\n    if (this.index !== start) {\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatRegExpIdentifierPart() {\n    const start = this.index;\n    const forceUFlag = !this._uFlag && this.ecmaVersion >= 2020;\n    let cp = this.currentCodePoint;\n    this.advance();\n\n    if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {\n      cp = this._lastIntValue;\n    } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {\n      cp = combineSurrogatePair(cp, this.currentCodePoint);\n      this.advance();\n    }\n\n    if (isRegExpIdentifierPart(cp)) {\n      this._lastIntValue = cp;\n      return true;\n    }\n\n    if (this.index !== start) {\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatCControlLetter() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterC)) {\n      if (this.eatControlLetter()) {\n        return true;\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatZero() {\n    if (this.currentCodePoint === DigitZero && !isDecimalDigit(this.nextCodePoint)) {\n      this._lastIntValue = 0;\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  eatControlEscape() {\n    if (this.eat(LatinSmallLetterF)) {\n      this._lastIntValue = FormFeed;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterN)) {\n      this._lastIntValue = LineFeed;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterR)) {\n      this._lastIntValue = CarriageReturn;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterT)) {\n      this._lastIntValue = CharacterTabulation;\n      return true;\n    }\n\n    if (this.eat(LatinSmallLetterV)) {\n      this._lastIntValue = LineTabulation;\n      return true;\n    }\n\n    return false;\n  }\n\n  eatControlLetter() {\n    const cp = this.currentCodePoint;\n\n    if (isLatinLetter(cp)) {\n      this.advance();\n      this._lastIntValue = cp % 0x20;\n      return true;\n    }\n\n    return false;\n  }\n\n  eatRegExpUnicodeEscapeSequence() {\n    let forceUFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const start = this.index;\n    const uFlag = forceUFlag || this._uFlag;\n\n    if (this.eat(LatinSmallLetterU)) {\n      if (uFlag && this.eatRegExpUnicodeSurrogatePairEscape() || this.eatFixedHexDigits(4) || uFlag && this.eatRegExpUnicodeCodePointEscape()) {\n        return true;\n      }\n\n      if (this.strict || uFlag) {\n        this.raise(\"Invalid unicode escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatRegExpUnicodeSurrogatePairEscape() {\n    const start = this.index;\n\n    if (this.eatFixedHexDigits(4)) {\n      const lead = this._lastIntValue;\n\n      if (isLeadSurrogate(lead) && this.eat(ReverseSolidus) && this.eat(LatinSmallLetterU) && this.eatFixedHexDigits(4)) {\n        const trail = this._lastIntValue;\n\n        if (isTrailSurrogate(trail)) {\n          this._lastIntValue = combineSurrogatePair(lead, trail);\n          return true;\n        }\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatRegExpUnicodeCodePointEscape() {\n    const start = this.index;\n\n    if (this.eat(LeftCurlyBracket) && this.eatHexDigits() && this.eat(RightCurlyBracket) && isValidUnicode(this._lastIntValue)) {\n      return true;\n    }\n\n    this.rewind(start);\n    return false;\n  }\n\n  eatIdentityEscape() {\n    const cp = this.currentCodePoint;\n\n    if (this.isValidIdentityEscape(cp)) {\n      this._lastIntValue = cp;\n      this.advance();\n      return true;\n    }\n\n    return false;\n  }\n\n  isValidIdentityEscape(cp) {\n    if (cp === -1) {\n      return false;\n    }\n\n    if (this._uFlag) {\n      return isSyntaxCharacter(cp) || cp === Solidus;\n    }\n\n    if (this.strict) {\n      return !isIdContinue(cp);\n    }\n\n    if (this._nFlag) {\n      return !(cp === LatinSmallLetterC || cp === LatinSmallLetterK);\n    }\n\n    return cp !== LatinSmallLetterC;\n  }\n\n  eatDecimalEscape() {\n    this._lastIntValue = 0;\n    let cp = this.currentCodePoint;\n\n    if (cp >= DigitOne && cp <= DigitNine) {\n      do {\n        this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero);\n        this.advance();\n      } while ((cp = this.currentCodePoint) >= DigitZero && cp <= DigitNine);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  eatUnicodePropertyValueExpression() {\n    const start = this.index;\n\n    if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {\n      this._lastKeyValue = this._lastStrValue;\n\n      if (this.eatUnicodePropertyValue()) {\n        this._lastValValue = this._lastStrValue;\n\n        if (isValidUnicodeProperty(this.ecmaVersion, this._lastKeyValue, this._lastValValue)) {\n          return true;\n        }\n\n        this.raise(\"Invalid property name\");\n      }\n    }\n\n    this.rewind(start);\n\n    if (this.eatLoneUnicodePropertyNameOrValue()) {\n      const nameOrValue = this._lastStrValue;\n\n      if (isValidUnicodeProperty(this.ecmaVersion, \"General_Category\", nameOrValue)) {\n        this._lastKeyValue = \"General_Category\";\n        this._lastValValue = nameOrValue;\n        return true;\n      }\n\n      if (isValidLoneUnicodeProperty(this.ecmaVersion, nameOrValue)) {\n        this._lastKeyValue = nameOrValue;\n        this._lastValValue = \"\";\n        return true;\n      }\n\n      this.raise(\"Invalid property name\");\n    }\n\n    return false;\n  }\n\n  eatUnicodePropertyName() {\n    this._lastStrValue = \"\";\n\n    while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {\n      this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this._lastStrValue !== \"\";\n  }\n\n  eatUnicodePropertyValue() {\n    this._lastStrValue = \"\";\n\n    while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {\n      this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this._lastStrValue !== \"\";\n  }\n\n  eatLoneUnicodePropertyNameOrValue() {\n    return this.eatUnicodePropertyValue();\n  }\n\n  eatHexEscapeSequence() {\n    const start = this.index;\n\n    if (this.eat(LatinSmallLetterX)) {\n      if (this.eatFixedHexDigits(2)) {\n        return true;\n      }\n\n      if (this._uFlag || this.strict) {\n        this.raise(\"Invalid escape\");\n      }\n\n      this.rewind(start);\n    }\n\n    return false;\n  }\n\n  eatDecimalDigits() {\n    const start = this.index;\n    this._lastIntValue = 0;\n\n    while (isDecimalDigit(this.currentCodePoint)) {\n      this._lastIntValue = 10 * this._lastIntValue + digitToInt(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this.index !== start;\n  }\n\n  eatHexDigits() {\n    const start = this.index;\n    this._lastIntValue = 0;\n\n    while (isHexDigit(this.currentCodePoint)) {\n      this._lastIntValue = 16 * this._lastIntValue + digitToInt(this.currentCodePoint);\n      this.advance();\n    }\n\n    return this.index !== start;\n  }\n\n  eatLegacyOctalEscapeSequence() {\n    if (this.eatOctalDigit()) {\n      const n1 = this._lastIntValue;\n\n      if (this.eatOctalDigit()) {\n        const n2 = this._lastIntValue;\n\n        if (n1 <= 3 && this.eatOctalDigit()) {\n          this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue;\n        } else {\n          this._lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        this._lastIntValue = n1;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  eatOctalDigit() {\n    const cp = this.currentCodePoint;\n\n    if (isOctalDigit(cp)) {\n      this.advance();\n      this._lastIntValue = cp - DigitZero;\n      return true;\n    }\n\n    this._lastIntValue = 0;\n    return false;\n  }\n\n  eatFixedHexDigits(length) {\n    const start = this.index;\n    this._lastIntValue = 0;\n\n    for (let i = 0; i < length; ++i) {\n      const cp = this.currentCodePoint;\n\n      if (!isHexDigit(cp)) {\n        this.rewind(start);\n        return false;\n      }\n\n      this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp);\n      this.advance();\n    }\n\n    return true;\n  }\n\n}\n\nexports.RegExpValidator = RegExpValidator;\nconst DummyPattern = {};\nconst DummyFlags = {};\nconst DummyCapturingGroup = {};\n\nclass RegExpParserState {\n  constructor(options) {\n    this._node = DummyPattern;\n    this._flags = DummyFlags;\n    this._backreferences = [];\n    this._capturingGroups = [];\n    this.source = \"\";\n    this.strict = Boolean(options && options.strict);\n    this.ecmaVersion = options && options.ecmaVersion || 2022;\n  }\n\n  get pattern() {\n    if (this._node.type !== \"Pattern\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    return this._node;\n  }\n\n  get flags() {\n    if (this._flags.type !== \"Flags\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    return this._flags;\n  }\n\n  onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices) {\n    this._flags = {\n      type: \"Flags\",\n      parent: null,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      global,\n      ignoreCase,\n      multiline,\n      unicode,\n      sticky,\n      dotAll,\n      hasIndices\n    };\n  }\n\n  onPatternEnter(start) {\n    this._node = {\n      type: \"Pattern\",\n      parent: null,\n      start,\n      end: start,\n      raw: \"\",\n      alternatives: []\n    };\n    this._backreferences.length = 0;\n    this._capturingGroups.length = 0;\n  }\n\n  onPatternLeave(start, end) {\n    this._node.end = end;\n    this._node.raw = this.source.slice(start, end);\n\n    for (const reference of this._backreferences) {\n      const ref = reference.ref;\n      const group = typeof ref === \"number\" ? this._capturingGroups[ref - 1] : this._capturingGroups.find(g => g.name === ref);\n      reference.resolved = group;\n      group.references.push(reference);\n    }\n  }\n\n  onAlternativeEnter(start) {\n    const parent = this._node;\n\n    if (parent.type !== \"Assertion\" && parent.type !== \"CapturingGroup\" && parent.type !== \"Group\" && parent.type !== \"Pattern\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"Alternative\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      elements: []\n    };\n    parent.alternatives.push(this._node);\n  }\n\n  onAlternativeLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onGroupEnter(start) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"Group\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      alternatives: []\n    };\n    parent.elements.push(this._node);\n  }\n\n  onGroupLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"Group\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onCapturingGroupEnter(start, name) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"CapturingGroup\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      name,\n      alternatives: [],\n      references: []\n    };\n    parent.elements.push(this._node);\n\n    this._capturingGroups.push(this._node);\n  }\n\n  onCapturingGroupLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"CapturingGroup\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onQuantifier(start, end, min, max, greedy) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const element = parent.elements.pop();\n\n    if (element == null || element.type === \"Quantifier\" || element.type === \"Assertion\" && element.kind !== \"lookahead\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = {\n      type: \"Quantifier\",\n      parent,\n      start: element.start,\n      end,\n      raw: this.source.slice(element.start, end),\n      min,\n      max,\n      greedy,\n      element\n    };\n    parent.elements.push(node);\n    element.parent = node;\n  }\n\n  onLookaroundAssertionEnter(start, kind, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = this._node = {\n      type: \"Assertion\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      kind,\n      negate,\n      alternatives: []\n    };\n    parent.elements.push(node);\n  }\n\n  onLookaroundAssertionLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"Assertion\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onEdgeAssertion(start, end, kind) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"Assertion\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind\n    });\n  }\n\n  onWordBoundaryAssertion(start, end, kind, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"Assertion\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      negate\n    });\n  }\n\n  onAnyCharacterSet(start, end, kind) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind\n    });\n  }\n\n  onEscapeCharacterSet(start, end, kind, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      negate\n    });\n  }\n\n  onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      key,\n      value,\n      negate\n    });\n  }\n\n  onCharacter(start, end, value) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    parent.elements.push({\n      type: \"Character\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      value\n    });\n  }\n\n  onBackreference(start, end, ref) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = {\n      type: \"Backreference\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      ref,\n      resolved: DummyCapturingGroup\n    };\n    parent.elements.push(node);\n\n    this._backreferences.push(node);\n  }\n\n  onCharacterClassEnter(start, negate) {\n    const parent = this._node;\n\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    this._node = {\n      type: \"CharacterClass\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      negate,\n      elements: []\n    };\n    parent.elements.push(this._node);\n  }\n\n  onCharacterClassLeave(start, end) {\n    const node = this._node;\n\n    if (node.type !== \"CharacterClass\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n\n  onCharacterClassRange(start, end) {\n    const parent = this._node;\n\n    if (parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n\n    const elements = parent.elements;\n    const max = elements.pop();\n    const hyphen = elements.pop();\n    const min = elements.pop();\n\n    if (!min || !max || !hyphen || min.type !== \"Character\" || max.type !== \"Character\" || hyphen.type !== \"Character\" || hyphen.value !== HyphenMinus) {\n      throw new Error(\"UnknownError\");\n    }\n\n    const node = {\n      type: \"CharacterClassRange\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      min,\n      max\n    };\n    min.parent = node;\n    max.parent = node;\n    elements.push(node);\n  }\n\n}\n\nclass RegExpParser {\n  constructor(options) {\n    this._state = new RegExpParserState(options);\n    this._validator = new RegExpValidator(this._state);\n  }\n\n  parseLiteral(source) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n    this._state.source = source;\n\n    this._validator.validateLiteral(source, start, end);\n\n    const pattern = this._state.pattern;\n    const flags = this._state.flags;\n    const literal = {\n      type: \"RegExpLiteral\",\n      parent: null,\n      start,\n      end,\n      raw: source,\n      pattern,\n      flags\n    };\n    pattern.parent = literal;\n    flags.parent = literal;\n    return literal;\n  }\n\n  parseFlags(source) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n    this._state.source = source;\n\n    this._validator.validateFlags(source, start, end);\n\n    return this._state.flags;\n  }\n\n  parsePattern(source) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n    let uFlag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this._state.source = source;\n\n    this._validator.validatePattern(source, start, end, uFlag);\n\n    return this._state.pattern;\n  }\n\n}\n\nexports.RegExpParser = RegExpParser;\n\nclass RegExpVisitor {\n  constructor(handlers) {\n    this._handlers = handlers;\n  }\n\n  visit(node) {\n    switch (node.type) {\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n\n      case \"Assertion\":\n        this.visitAssertion(node);\n        break;\n\n      case \"Backreference\":\n        this.visitBackreference(node);\n        break;\n\n      case \"CapturingGroup\":\n        this.visitCapturingGroup(node);\n        break;\n\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n\n      case \"CharacterClass\":\n        this.visitCharacterClass(node);\n        break;\n\n      case \"CharacterClassRange\":\n        this.visitCharacterClassRange(node);\n        break;\n\n      case \"CharacterSet\":\n        this.visitCharacterSet(node);\n        break;\n\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n\n      case \"RegExpLiteral\":\n        this.visitRegExpLiteral(node);\n        break;\n\n      default:\n        throw new Error(`Unknown type: ${node.type}`);\n    }\n  }\n\n  visitAlternative(node) {\n    if (this._handlers.onAlternativeEnter) {\n      this._handlers.onAlternativeEnter(node);\n    }\n\n    node.elements.forEach(this.visit, this);\n\n    if (this._handlers.onAlternativeLeave) {\n      this._handlers.onAlternativeLeave(node);\n    }\n  }\n\n  visitAssertion(node) {\n    if (this._handlers.onAssertionEnter) {\n      this._handlers.onAssertionEnter(node);\n    }\n\n    if (node.kind === \"lookahead\" || node.kind === \"lookbehind\") {\n      node.alternatives.forEach(this.visit, this);\n    }\n\n    if (this._handlers.onAssertionLeave) {\n      this._handlers.onAssertionLeave(node);\n    }\n  }\n\n  visitBackreference(node) {\n    if (this._handlers.onBackreferenceEnter) {\n      this._handlers.onBackreferenceEnter(node);\n    }\n\n    if (this._handlers.onBackreferenceLeave) {\n      this._handlers.onBackreferenceLeave(node);\n    }\n  }\n\n  visitCapturingGroup(node) {\n    if (this._handlers.onCapturingGroupEnter) {\n      this._handlers.onCapturingGroupEnter(node);\n    }\n\n    node.alternatives.forEach(this.visit, this);\n\n    if (this._handlers.onCapturingGroupLeave) {\n      this._handlers.onCapturingGroupLeave(node);\n    }\n  }\n\n  visitCharacter(node) {\n    if (this._handlers.onCharacterEnter) {\n      this._handlers.onCharacterEnter(node);\n    }\n\n    if (this._handlers.onCharacterLeave) {\n      this._handlers.onCharacterLeave(node);\n    }\n  }\n\n  visitCharacterClass(node) {\n    if (this._handlers.onCharacterClassEnter) {\n      this._handlers.onCharacterClassEnter(node);\n    }\n\n    node.elements.forEach(this.visit, this);\n\n    if (this._handlers.onCharacterClassLeave) {\n      this._handlers.onCharacterClassLeave(node);\n    }\n  }\n\n  visitCharacterClassRange(node) {\n    if (this._handlers.onCharacterClassRangeEnter) {\n      this._handlers.onCharacterClassRangeEnter(node);\n    }\n\n    this.visitCharacter(node.min);\n    this.visitCharacter(node.max);\n\n    if (this._handlers.onCharacterClassRangeLeave) {\n      this._handlers.onCharacterClassRangeLeave(node);\n    }\n  }\n\n  visitCharacterSet(node) {\n    if (this._handlers.onCharacterSetEnter) {\n      this._handlers.onCharacterSetEnter(node);\n    }\n\n    if (this._handlers.onCharacterSetLeave) {\n      this._handlers.onCharacterSetLeave(node);\n    }\n  }\n\n  visitFlags(node) {\n    if (this._handlers.onFlagsEnter) {\n      this._handlers.onFlagsEnter(node);\n    }\n\n    if (this._handlers.onFlagsLeave) {\n      this._handlers.onFlagsLeave(node);\n    }\n  }\n\n  visitGroup(node) {\n    if (this._handlers.onGroupEnter) {\n      this._handlers.onGroupEnter(node);\n    }\n\n    node.alternatives.forEach(this.visit, this);\n\n    if (this._handlers.onGroupLeave) {\n      this._handlers.onGroupLeave(node);\n    }\n  }\n\n  visitPattern(node) {\n    if (this._handlers.onPatternEnter) {\n      this._handlers.onPatternEnter(node);\n    }\n\n    node.alternatives.forEach(this.visit, this);\n\n    if (this._handlers.onPatternLeave) {\n      this._handlers.onPatternLeave(node);\n    }\n  }\n\n  visitQuantifier(node) {\n    if (this._handlers.onQuantifierEnter) {\n      this._handlers.onQuantifierEnter(node);\n    }\n\n    this.visit(node.element);\n\n    if (this._handlers.onQuantifierLeave) {\n      this._handlers.onQuantifierLeave(node);\n    }\n  }\n\n  visitRegExpLiteral(node) {\n    if (this._handlers.onRegExpLiteralEnter) {\n      this._handlers.onRegExpLiteralEnter(node);\n    }\n\n    this.visitPattern(node.pattern);\n    this.visitFlags(node.flags);\n\n    if (this._handlers.onRegExpLiteralLeave) {\n      this._handlers.onRegExpLiteralLeave(node);\n    }\n  }\n\n}\n\nfunction parseRegExpLiteral(source, options) {\n  return new RegExpParser(options).parseLiteral(String(source));\n}\n\nfunction validateRegExpLiteral(source, options) {\n  return new RegExpValidator(options).validateLiteral(source);\n}\n\nfunction visitRegExpAST(node, handlers) {\n  new RegExpVisitor(handlers).visit(node);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regexpp/index.mjs\n");

/***/ })

}]);